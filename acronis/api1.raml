#%RAML 1.0

title: Alert Manager
version: v1.0
baseUri: /api/alert_manager/v1
protocols: [HTTP, HTTPS]
mediaType: application/json

uses:
  common: libraries/common.raml
  alert: libraries/alert.raml
  status: libraries/status.raml
  count: libraries/count.raml
  resourceStatus: libraries/resource_status.raml
  backupAlertSchemas: libraries/alert_schemas/backup.raml

traits:
  tenantRequired:
    description: Request must have an identifier of tenant
    headers:
      X-Apigw-Tenant-ID: string
      X-Apigw-Tenant-Locator:
        type: string
        description: |
          Locator describes hierarchy branch of current tenant.
          As separator using '/' symbol
        example: /parent1/parent2/current-tenant/
  rootRequired:
    description: Requests is allowed for users with root privileges only
    headers:
      X-Apigw-Tenant-ID:
        type: string
        enum: ['1', 'EC22CEE6-FC80-4325-A10F-7EAA5F424759']
      X-Apigw-Tenant-Locator:
        type: string
        enum: ['1', '/00000000-0000-0000-0000-000000000000/']
  alertFilterable:
    queryParameters:
      deleted_at:
        type: string
        required: false
        pattern:
          ^([0-9]+)|(eq\([0-9]+\))$|(le\([0-9]+\))|(lt\([0-9]+\))|(gt\([0-9]+\))|(ge\([0-9]+\))
        examples:
           example1: eq(42)
           example2: le(42)
           example3: lt(42)
           example4: gt(42)
           example5: ge(42)
      id:
        type: common.uuid[]
        required: false
        description: IDs of alerts to be selected
      query:
        type: string
        required: false
        description: case-insensitive search for value inside planName or resourceName of alert
      severity: alert.Severity
      show_deleted:
        type: boolean
        required: false
        description: Include inactive alerts
        default: false
      source:
        type: string
        required: false
      source_time_stamp:
        type: string
        required: false
        description: see examples of deleted_at
        pattern:
          ^([0-9]+)|(eq\([0-9]+\))$|(le\([0-9]+\))|(lt\([0-9]+\))|(gt\([0-9]+\))|(ge\([0-9]+\))
      type:
        type: string[]
        required: false
      updated_at:
        type: string
        required: false
        description: see examples of deleted_at
        pattern:
          ^([0-9]+)|(eq\([0-9]+\))$|(le\([0-9]+\))|(lt\([0-9]+\))|(gt\([0-9]+\))|(ge\([0-9]+\))
  orderdable:
    queryParameters:
        order:
          type: string
          description: |
            Order result by column name. By default means ascending order
          required: false
          examples:
            example1: column
            example2: asc(column)
            example3: desc(column)

annotationTypes:
  validateContext:
    type: boolean
    description: |
      Validate existence of all context fields, described for current alert type
  schemaIn:
    description: Schema of alert is described by specified value
  ExtJS:
    description: Declaration for ExtJS meta

/alerts:
  post:
    is: [tenantRequired]
    description: Activate alert
    (ExtJS): AlertManager.Raise
    body:
      type: alert.AlertBody
      (schemaIn): AllAlertSchemas
      (validateContext): true
    responses:
      200:
        body: alert.AlertID
      400:
        description: Bad request, incomplete context
        body: common.Error
  get:
    is: [tenantRequired, alertFilterable, orderdable]
    description: Get alerts by filter. Filter parameter may be any combination of the following query parameters
      and context keys/searchable details of alert's type.
    (ExtJS): AlertManager.GetAll
    queryParameters:
      limit?:
        type: integer
        description: Limit count of returned alerts
      show_deleted?:
        type: boolean
        description: Show inactive alerts
        default: false
      skip?:
        type: common.uuid[]
        description: Do not include in response alerts of given ids
    responses:
      200:
        body:
          properties:
            items:
              type: alert.AlertView[]
              (schemaIn): AllAlertSchemas
  delete:
    is: [tenantRequired, alertFilterable]
    (ExtJS): AlertManager.DeleteAll
    description: Delete alerts by filter. Filter parameter may be any combination of the following query parameters
      and context keys/searchable details of alert's type. Alert will be deleted even it has `orphaned` flag.
    responses:
      204:
        description: Alerts were successfully deleted

/alerts/{id}:
  get:
    is: [tenantRequired]
    (ExtJS): AlertManager.GetById
    queryParameters:
      show_deleted?:
        type: boolean
        description: Show inactive alerts
        default: false
    responses:
      200:
        description: Alert was successfully found
        body: alert.AlertView
        (schemaIn): AllAlertSchemas
      400:
        description: Invalid UUID
        body: common.Error
      404:
        description: Alert was not found
        body: common.Error

  delete:
    is: [tenantRequired]
    (ExtJS): AlertManager.DeleteById
    responses:
      204:
        description: Alert was successfully deleted
      400:
        description: Invalid UUID
        body: common.Error
      404:
        description: Alert was not found
        body: common.Error

/count:
  get:
    is: [tenantRequired, count.EmbedsForCountReport]
    description: Count of alerts
    (ExtJS): AlertManager.Count
    queryParameters:
      embed_tenants?:
        type: boolean
        description: Whether to group alerts by tenant
      embed_types?:
        type: boolean
        description: Whether to group alerts by type; mutually exclusive with embed_severities
      embed_severities?:
        type: boolean
        description: Whether to group alerts by severity; mutually exclusive with embed_types
    responses:
      200:
        body: count.Report
      400:
        description: Bad request
        body: common.Error

/healthcheck:
  get:
    description: Health check
    (ExtJS): AlertManager.HealthCheck
    responses:
      200:

/status:
  get:
    is: [tenantRequired]
    description: |
      Return last of the most critical alerts grouped by selected scope
    (ExtJS): AlertManager.GetStatus
    queryParameters:
      scope_key:
        type: string
        description: |
          Key of parameter from context or searchable details. Results will be
          grouped by values of scopes
      scope_value:
        type: string[]
        description: Filter values of scope
        required: false
    responses:
      200:
        body:
          properties:
            items: status.ScopeStatus[]
      400:
        description: Bad request
        body: common.Error

/stats:
  get:
    is: [tenantRequired]
    description: Return statistics of current tenant
    (ExtJS): AlertManager.GetStats
    responses:
      200:
        body:
          type: object
          properties:
            count:
              type: integer
              description: Total count of alerts
            modifiedAt:
              type: datetime
              description: |
                Last modification time of alerts. If there are no alerts value
                equals 'null'
              format: rfc3339

/types:
  get:
    is: [tenantRequired]
    description: Get all registered alert types
    (ExtJS): AlertManager.GetTypes
    responses:
      200:
        body:
          properties:
            items: alert.Type[]
  post:
    is: [rootRequired]
    description: Register alert types
    (ExtJS): AlertManager.RegisterTypes
    body:
      description: Batch of types to register
      properties:
        items: alert.Type[]
    responses:
      204:
        description: Alert types was successfully registered
      400:
        description: Bad request
        body: common.Error

/types/{id}:
  get:
    is: [tenantRequired]
    description: Get registered alert type
    (ExtJS): AlertManager.GetTypeById
    responses:
      200:
        description: Type was successfully found
        body: alert.Type
      404:
        description: Type was not found
        body: common.Error
  delete:
    is: [rootRequired]
    description: Unregister alert type, make all alerts of this type orphaned
    (ExtJS): AlertManager.DeleteTypeById
    responses:
      204:
        description: Type was successfully unregistered
      404:
        description: Type was not found
        body: common.Error

/resource_status:
  get:
    is: [tenantRequired]
    description: |
      Status contains maximum severity of alert found for that resource. Resource with ID that was not found in
      resourceId parameter of any active alert considered to have "ok" severity. Can return multiple records for
      one resource if it has multiple alerts with same severity and same creation time.
    queryParameters:
      id?:
        type: string[]
        description: IDs of resources; if omitted response will contain statuses for all resources that have alerts
      embed_alert?:
        description: if set to true then entire alert view will be included in response
        type: boolean
        default: false
    responses:
      200:
        body:
          properties:
            items:
              type: resourceStatus.ResourceStatus[]

/sync:
  get:
    is: [tenantRequired, alertFilterable, orderdable]
    responses:
      200:
        description: |
          Select alert IDs by filter similar to filter of GET /alerts, but without filtering by alert's parameters
        body:
          properties:
            items:
              type: alert.AlertSync[]
      400:
        description: Unsupported parameters in request
        body: common.Error