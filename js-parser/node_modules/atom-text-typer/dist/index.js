"use strict";
var Change = (function () {
    function Change() {
    }
    return Change;
}());
exports.Change = Change;
var TextTyper = (function () {
    function TextTyper(content) {
        var _this = this;
        this.items = [];
        this.currentIndex = 0;
        this.files = {};
        var parsed = JSON.parse(content);
        parsed.forEach(function (item) {
            var change = recordToChange(item);
            _this.items.push(change);
        });
        this.updateCurrentContent();
    }
    TextTyper.prototype.currentContent = function (filePath) {
        return this.files[filePath];
    };
    TextTyper.prototype.currentContentPath = function () {
        return this.items[this.currentIndex].from;
    };
    TextTyper.prototype.hasNext = function () {
        return this.currentIndex < this.items.length - 1;
    };
    TextTyper.prototype.updateCurrentContent = function () {
        var filePath = this.currentContentPath();
        var oldContent = this.files[filePath] || "";
        var change = this.items[this.currentIndex];
        var beforeStart = oldContent.substring(0, change.oldRange.start);
        var afterEnd = oldContent.substring(change.oldRange.start + change.oldText.length);
        this.files[filePath] = beforeStart + change.newText + afterEnd;
    };
    TextTyper.prototype.increment = function () {
        if (!this.hasNext()) {
            return;
        }
        this.currentIndex++;
        this.updateCurrentContent();
    };
    return TextTyper;
}());
exports.TextTyper = TextTyper;
function generateInitialChange(filePath, content) {
    var i = 0;
    return {
        "from": filePath,
        "oldRange": {
            "start": 0,
            "end": 0
        },
        "newRange": {
            "start": 0,
            "end": content.length
        },
        "oldText": "",
        "newText": content
    };
}
exports.generateInitialChange = generateInitialChange;
function recordToChange(record) {
    var i = 0;
    return {
        "from": record[i++],
        "oldRange": {
            "start": record[i++],
            "end": record[i++]
        },
        "newRange": {
            "start": record[i++],
            "end": record[i++]
        },
        "oldText": record[i++],
        "newText": record[i++]
    };
}
exports.recordToChange = recordToChange;
function changeToRecord(change, filePath) {
    var record = [];
    record.push(filePath || change.from);
    record.push(change.oldRange.start);
    record.push(change.oldRange.end);
    record.push(change.newRange.start);
    record.push(change.newRange.end);
    record.push(change.oldText);
    record.push(change.newText);
    return record;
}
exports.changeToRecord = changeToRecord;
//# sourceMappingURL=index.js.map