"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var impl = require("./impl");
var valuesCompare = require("./valuesCompare");
exports.TRAVIS_COMMIT_MESSAGE = 'TRAVIS_COMMIT_MESSAGE';
exports.TRAVIS_TRIGGER_FILE_NAME = "trigger.txt";
function rootDir(currentDir) {
    return impl.rootDir(currentDir);
}
exports.rootDir = rootDir;
function configureSecurity(homeDir) {
    return impl.configureSecurity(homeDir);
}
exports.configureSecurity = configureSecurity;
function setSSHUrl(workingDir) {
    return impl.setSSHUrl(workingDir);
}
exports.setSSHUrl = setSSHUrl;
function setGitUser(workingDir) {
    return impl.setGitUser(workingDir);
}
exports.setGitUser = setGitUser;
function contributeTheStorage(workingDir, paths, messageOrFileName, messageFromFile) {
    if (messageFromFile === void 0) { messageFromFile = false; }
    return impl.contributeTheStorage(workingDir, paths, messageOrFileName, messageFromFile);
}
exports.contributeTheStorage = contributeTheStorage;
function extractValueFromTravisCommitMessage(tag) {
    return impl.extractValueFromTravisCommitMessage(tag);
}
exports.extractValueFromTravisCommitMessage = extractValueFromTravisCommitMessage;
function cloneRepository(dir, uri, params) {
    return impl.cloneRepository(dir, uri, params);
}
exports.cloneRepository = cloneRepository;
function checkoutCommit(dir, commitId) {
    return impl.checkoutCommit(dir, commitId);
}
exports.checkoutCommit = checkoutCommit;
function getLastCommitId(wrkDir) {
    return impl.getLastCommitId(wrkDir);
}
exports.getLastCommitId = getLastCommitId;
function isWindows() {
    return impl.isWindows();
}
exports.isWindows = isWindows;
function deleteFolderRecursive(folder) {
    return impl.deleteFolderRecursive(folder);
}
exports.deleteFolderRecursive = deleteFolderRecursive;
;
function compare(arg0, arg1) {
    return valuesCompare.compare(arg0, arg1);
}
exports.compare = compare;
function insertDummyChanges(rootDir, fileName) {
    if (fileName === void 0) { fileName = exports.TRAVIS_TRIGGER_FILE_NAME; }
    return impl.insertDummyChanges(rootDir, fileName);
}
exports.insertDummyChanges = insertDummyChanges;
function pluginBranch(pluginName, folderOrDescriptor, rootFolder) {
    return impl.pluginBranch(pluginName, folderOrDescriptor, rootFolder);
}
exports.pluginBranch = pluginBranch;
//# sourceMappingURL=index.js.map