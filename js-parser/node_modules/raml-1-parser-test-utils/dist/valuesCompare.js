"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
var Diff = /** @class */ (function () {
    function Diff(_path, _value0, _value1, _comment) {
        this._path = _path;
        this._value0 = _value0;
        this._value1 = _value1;
        this._comment = _comment;
        this._path = _path;
        this._value0 = _value0;
        this._value1 = _value1;
        this._comment = _comment;
    }
    Diff.prototype.message = function (label0, label1) {
        label0 = label0 || "value0";
        label1 = label1 || "value1";
        var strValue0 = "undefined";
        var strValue1 = "undefined";
        if (this._value0 != null) {
            try {
                strValue0 = JSON.stringify(this._value0, null, 2).trim();
            }
            catch (err) {
                strValue0 = this._value0.toString();
            }
        }
        if (this._value1 != null) {
            try {
                strValue1 = JSON.stringify(this._value1, null, 2).trim();
            }
            catch (err) {
                strValue1 = this._value1.toString();
            }
        }
        return "path: " + this._path + "\ncomment: " + this._comment + "\n" + label0 + ": " + strValue0 + "\n" + label1 + ": " + strValue1;
    };
    Diff.prototype.values = function () {
        return [this._value0, this._value1];
    };
    Diff.prototype.path = function () {
        return this._path;
    };
    Diff.prototype.comment = function () {
        return this._comment;
    };
    return Diff;
}());
exports.Diff = Diff;
function compare(arg0, arg1, path) {
    if (path === void 0) { path = ''; }
    var diffs = [];
    if (arg0 == null) {
        if (arg1 != null) {
            diffs.push(new Diff(path, arg0, arg1, 'Defined/undefined mismatch'));
            return diffs;
        }
    }
    else if (arg1 == null) {
        diffs.push(new Diff(path, arg0, arg1, 'Defined/undefined mismatch'));
        return diffs;
    }
    else if (Array.isArray(arg0)) {
        if (!Array.isArray(arg1)) {
            diffs.push(new Diff(path, arg0, arg1, 'Array/' + typeof (arg1) + ' mismatch'));
            return diffs;
        }
        else {
            var l0 = arg0.length;
            var l1 = arg1.length;
            if (l1 != l0) {
                diffs.push(new Diff(path, arg0, arg1, 'Array lengths mismatch'));
                return diffs;
            }
            var l = Math.min(l0, l1);
            for (var i = 0; i < l; i++) {
                diffs = diffs.concat(compare(arg0[i], arg1[i], path + '[' + i + ']'));
            }
        }
    }
    else if (arg0 instanceof Object) {
        if (!(arg1 instanceof Object)) {
            diffs.push(new Diff(path, arg0, arg1, 'Object/' + typeof (arg1) + ' mismatch'));
            return diffs;
        }
        else {
            var keys0 = Object.keys(arg0);
            var keys1 = Object.keys(arg1);
            var map = {};
            for (var i = 0; i < keys0.length; i++) {
                var key = keys0[i];
                map[key] = true;
                var val0 = arg0[key];
                var val1 = arg1[key];
                diffs = diffs.concat(compare(val0, val1, path + '/' + key));
            }
            for (var i = 0; i < keys1.length; i++) {
                var key = keys1[i];
                if (map[key]) {
                    continue;
                }
                var val0 = arg0[key];
                var val1 = arg1[key];
                diffs = diffs.concat(compare(val0, val1, path + '/' + key));
            }
        }
    }
    else {
        if (arg0 !== arg1) {
            if (!(typeof arg0 == "number" && typeof arg1 == "number" && isNaN(arg0) && isNaN(arg1))) {
                diffs.push(new Diff(path, arg0, arg1, 'Inequal values'));
            }
        }
    }
    return diffs;
}
exports.compare = compare;
//# sourceMappingURL=valuesCompare.js.map